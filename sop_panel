# Truendo CMP Implementation SOP
## Standard Operating Procedure for Custom Privacy Settings Page

### Overview
This SOP guides you through implementing a custom privacy settings page using Truendo's Consent Management Platform (CMP) API. This allows you to create a branded, customized privacy center while maintaining full GDPR/CCPA compliance.

---

## Step 1: Initial Setup

### 1.1 Load Truendo CMP Script
Add the following scripts to your HTML `<head>` section:

```html
<script>
  window.TruSettings = {
    siteid: "YOUR_SITE_ID_HERE",
    custom_url: "true",
    custom_url_value: "truendo",
    tru_headless: "true",
  };
</script>
<script
  id="truendoAutoBlock"
  type="text/javascript"
  src="./truendo/pc/truendo_cmp.pid.js"
></script>
```

**Important Configuration:**
- Replace `YOUR_SITE_ID_HERE` with your actual Truendo site ID
- `tru_headless: "true"` enables API-only mode (no default UI)
- `custom_url_value: "truendo"` sets the path for Truendo assets

### 1.2 Wait for Truendo Initialization
```javascript
window.addEventListener("load", function () {
  // Wait for Truendo to fully initialize
  setTimeout(initializePrivacyDisplay, 1000);
});

// Fallback initialization
if (window.Truendo) {
  initializePrivacyDisplay();
}
```

---

## Step 2: Core Truendo API Functions

### 2.1 `Truendo.getCatsAndServices()`
**Purpose:** Retrieves all privacy categories and their associated services

**Returns:** Array of category objects with structure:
```javascript
{
  cat: "statistics",           // Category ID
  name: "Analytics",           // Display name
  desc: "Description...",      // Category description
  state: "active",             // Current state (active/inactive)
  services: [...]              // Array of services in this category
}
```

**Usage Example:**
```javascript
function displayData() {
  const catsAndServices = Truendo.getCatsAndServices();
  console.log("Categories:", catsAndServices);
  
  catsAndServices.forEach((category) => {
    console.log(`Category: ${category.name}, State: ${category.state}`);
    // Process each category...
  });
}
```

### 2.2 `Truendo.toggleCat(category)`
**Purpose:** Toggles the consent state of a specific category

**Parameters:** 
- `category`: Category object (from getCatsAndServices)

**Usage Example:**
```javascript
function toggleCategory(category) {
  Truendo.toggleCat(category);
  console.log(`Toggled ${category.name} to ${category.state}`);
  
  // Update UI to reflect change
  updateCategoryDisplay(category);
}
```

### 2.3 `Truendo.SaveSettingsClosePanel()`
**Purpose:** Saves current user preferences and closes the consent panel

**Usage Example:**
```javascript
function saveUserPreferences() {
  Truendo.SaveSettingsClosePanel();
  console.log("User preferences saved");
  
  // Optional: Refresh page to apply changes
  setTimeout(() => {
    window.location.reload();
  }, 500);
}
```

### 2.4 `Truendo.acceptNecessaryCookiesOnly()`
**Purpose:** Accepts only necessary cookies, rejects all optional categories

**Usage Example:**
```javascript
function acceptNecessaryOnly() {
  Truendo.acceptNecessaryCookiesOnly();
  console.log("Accepted necessary cookies only");
  
  // Refresh to apply changes
  setTimeout(() => {
    window.location.reload();
  }, 500);
}
```

### 2.5 `Truendo.acceptAllCookies()`
**Purpose:** Accepts all available cookie categories

**Usage Example:**
```javascript
function acceptAllCookies() {
  Truendo.acceptAllCookies();
  console.log("Accepted all cookies");
  
  // Refresh to apply changes
  setTimeout(() => {
    window.location.reload();
  }, 500);
}
```

### 2.6 `Truendo.privacyID()`
**Purpose:** Gets the user's unique privacy identifier

**Returns:** String containing privacy ID

**Usage Example:**
```javascript
function displayPrivacyID() {
  const privacyID = Truendo.privacyID();
  document.getElementById("privacy-id").textContent = privacyID || "Not available";
}
```

---

## Step 3: Implementation Example

### 3.1 Basic HTML Structure
```html
<!DOCTYPE html>
<html>
<head>
  <!-- Truendo Setup Scripts (from Step 1) -->
  <title>Privacy Settings</title>
</head>
<body>
  <div class="privacy-container">
    <h1>Privacy Settings</h1>
    
    <!-- Action Buttons -->
    <div class="action-buttons">
      <button onclick="acceptNecessaryOnly()">Necessary Only</button>
      <button onclick="acceptAllCookies()">Accept All</button>
      <button onclick="saveUserPreferences()">Save Changes</button>
    </div>
    
    <!-- Privacy ID Display -->
    <div class="privacy-id">
      <label>Your Privacy ID:</label>
      <span id="privacy-id">Loading...</span>
    </div>
    
    <!-- Categories Container -->
    <div id="categories-container">
      Loading categories...
    </div>
  </div>
</body>
</html>
```

### 3.2 JavaScript Implementation
```javascript
function initializePrivacyDisplay() {
  // Display Privacy ID
  displayPrivacyID();
  
  // Display Categories
  displayCategories();
}

function displayCategories() {
  const container = document.getElementById("categories-container");
  const categories = Truendo.getCatsAndServices();
  
  container.innerHTML = "";
  
  categories.forEach(category => {
    const categoryElement = createCategoryElement(category);
    container.appendChild(categoryElement);
  });
}

function createCategoryElement(category) {
  const div = document.createElement("div");
  div.className = "category";
  
  const isNecessary = category.cat === "necessary";
  const isActive = category.state === "active";
  
  div.innerHTML = `
    <div class="category-header">
      <h3>${category.name}</h3>
      <label class="toggle-switch">
        <input type="checkbox" 
               ${isActive ? 'checked' : ''} 
               ${isNecessary ? 'disabled' : ''}
               onchange="toggleCategory(this, '${category.cat}')">
        <span class="slider"></span>
      </label>
    </div>
    <p class="category-description">${category.desc}</p>
  `;
  
  return div;
}

function toggleCategory(checkbox, categoryId) {
  const categories = Truendo.getCatsAndServices();
  const category = categories.find(cat => cat.cat === categoryId);
  
  if (category) {
    Truendo.toggleCat(category);
    console.log(`Toggled ${category.name}: ${category.state}`);
  }
}

// Action Button Functions
function acceptNecessaryOnly() {
  Truendo.acceptNecessaryCookiesOnly();
  setTimeout(() => window.location.reload(), 500);
}

function acceptAllCookies() {
  Truendo.acceptAllCookies();
  setTimeout(() => window.location.reload(), 500);
}

function saveUserPreferences() {
  Truendo.SaveSettingsClosePanel();
  setTimeout(() => window.location.reload(), 500);
}

function displayPrivacyID() {
  const privacyID = Truendo.privacyID();
  document.getElementById("privacy-id").textContent = privacyID || "Not available";
}
```

---

## Step 4: Testing and Validation

### 4.1 Testing Checklist
- [ ] Truendo script loads correctly
- [ ] Categories display with correct states
- [ ] Toggle switches work for optional categories
- [ ] Necessary categories are properly disabled
- [ ] "Accept All" button activates all categories
- [ ] "Necessary Only" button deactivates optional categories
- [ ] "Save Changes" button persists user preferences
- [ ] Privacy ID displays correctly
- [ ] Page refreshes apply consent changes

### 4.2 Browser Console Debugging
```javascript
// Check if Truendo is loaded
console.log("Truendo loaded:", typeof window.Truendo !== "undefined");

// Check categories
console.log("Categories:", Truendo.getCatsAndServices());

// Check privacy ID
console.log("Privacy ID:", Truendo.privacyID());
```

---

## Step 5: Advanced Features

### 5.1 Service Details
Access detailed information about each service:
```javascript
categories.forEach(category => {
  category.services.forEach(service => {
    console.log(`Service: ${service.name}`);
    console.log(`Purpose: ${service.purpose_name}`);
    console.log(`Vendor: ${service.vendor?.company_name}`);
    console.log(`Cookies: ${service.cookies?.length || 0}`);
  });
});
```

### 5.2 Cookie Information
Display specific cookie details:
```javascript
service.cookies?.forEach(cookie => {
  console.log(`Cookie: ${cookie.name}`);
  console.log(`Duration: ${cookie.duration.value} ${cookie.duration.type}`);
  console.log(`Domain: ${cookie.cookie_domain}`);
});
```

---

## Step 6: Best Practices

### 6.1 Error Handling
```javascript
function safeExecute(func, fallback) {
  try {
    if (window.Truendo) {
      return func();
    } else {
      console.warn("Truendo not loaded");
      return fallback();
    }
  } catch (error) {
    console.error("Truendo API error:", error);
    return fallback();
  }
}
```

### 6.2 Performance Optimization
- Use `setTimeout` for initialization to ensure Truendo is fully loaded
- Implement loading states for better UX
- Cache category data to avoid repeated API calls

### 6.3 Accessibility
- Ensure proper ARIA labels for toggle switches
- Use semantic HTML structure
- Provide keyboard navigation support

---

## Troubleshooting

### Common Issues:
1. **Truendo not loading**: Check site ID and script path
2. **Categories not displaying**: Ensure proper initialization timing
3. **Toggles not working**: Verify category objects are passed correctly
4. **Changes not persisting**: Call `SaveSettingsClosePanel()` after modifications

### Support Resources:
- Truendo API Documentation
- Browser Developer Tools Console
- Network tab to verify script loading