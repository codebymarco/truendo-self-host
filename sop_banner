# Truendo Custom Cookie Banner SOP
## Standard Operating Procedure for Custom Cookie Consent Banner Implementation

### Overview
This SOP guides you through implementing a custom cookie consent banner using Truendo's CMP API while maintaining full GDPR/CCPA compliance. This allows you to create a branded cookie banner that matches your site's design.

---

## Step 1: Basic Setup

### 1.1 Load Truendo CMP Script
Add the following scripts to your HTML `<head>` section:

```html
<script>
  window.TruSettings = {
    siteid: "YOUR_SITE_ID_HERE",
    custom_url: "true",
    custom_url_value: "truendo",
    tru_headless: "true",  // This disables Truendo's default banner
  };
</script>
<script
  id="truendoAutoBlock"
  type="text/javascript"
  src="./truendo/pc/truendo_cmp.pid.js"
></script>
```

**Key Configuration:**
- Replace `YOUR_SITE_ID_HERE` with your actual Truendo site ID
- `tru_headless: "true"` prevents Truendo's default banner from showing
- This allows you to use your own custom banner design

---

## Step 2: Custom Banner HTML Structure

### 2.1 Banner Container
Create a banner element that's initially hidden:

```html
<div id="cc-banner" style="display: none">
  <h3>Your Privacy</h3>
  <p>
    We use cookies to improve your experience on our site and to show you
    personalized ads. Click [ACCEPT] to accept all cookies, [NECESSARY ONLY]
    to accept only the necessary cookies, or [MY OPTIONS] to find out more
    about the use of cookies and to change your cookie preferences.
  </p>
  
  <!-- Action Buttons -->
  <button type="button" onclick="javascript:Truendo.openCookieSettings()">
    My Options
  </button>
  <button type="button" onclick="javascript:Truendo.acceptNecessaryCookiesOnly()">
    Necessary Only
  </button>
  <button type="button" onclick="javascript:Truendo.acceptAllCookies()">
    Accept
  </button>
</div>
```

### 2.2 Banner Styling Example
```css
#cc-banner {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: #ffffff;
  border-top: 2px solid #e0e0e0;
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  z-index: 9999;
  font-family: Arial, sans-serif;
}

#cc-banner h3 {
  margin: 0 0 10px 0;
  font-size: 18px;
  color: #333;
}

#cc-banner p {
  margin: 0 0 15px 0;
  font-size: 14px;
  line-height: 1.5;
  color: #666;
}

#cc-banner button {
  margin-right: 10px;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
}

#cc-banner button:first-of-type {
  background: #f5f5f5;
  color: #333;
  border: 1px solid #ccc;
}

#cc-banner button:nth-of-type(2) {
  background: #666;
  color: white;
}

#cc-banner button:last-of-type {
  background: #007bff;
  color: white;
}

#cc-banner button:hover {
  opacity: 0.9;
}
```

---

## Step 3: Core Banner Functions

### 3.1 `Truendo.openCookieSettings()`
**Purpose:** Opens the detailed cookie settings panel (your custom privacy page)

**Usage:** Used for "My Options" or "Manage Preferences" buttons

**Example:**
```html
<button type="button" onclick="Truendo.openCookieSettings()">
  My Options
</button>
```

**What it does:**
- Shows detailed privacy settings
- Allows granular control over cookie categories
- Typically redirects to your custom privacy settings page

### 3.2 `Truendo.acceptNecessaryCookiesOnly()`
**Purpose:** Accepts only necessary cookies, rejects all optional categories

**Usage:** Used for "Necessary Only" or "Reject All" buttons

**Example:**
```html
<button type="button" onclick="Truendo.acceptNecessaryCookiesOnly()">
  Necessary Only
</button>
```

**What it does:**
- Enables only "necessary" category cookies
- Disables all optional categories (analytics, marketing, social, etc.)
- Hides the banner after selection
- Saves user preference

### 3.3 `Truendo.acceptAllCookies()`
**Purpose:** Accepts all available cookie categories

**Usage:** Used for "Accept All" or "Accept" buttons

**Example:**
```html
<button type="button" onclick="Truendo.acceptAllCookies()">
  Accept
</button>
```

**What it does:**
- Enables all cookie categories
- Grants consent for all tracking and analytics
- Hides the banner after selection
- Saves user preference

---

## Step 4: Banner Display Logic

### 4.1 Show Banner When Needed
```javascript
function checkAndShowBanner() {
  // Check if user has already made a choice
  if (!Truendo.hasUserMadeChoice()) {
    document.getElementById('cc-banner').style.display = 'block';
  }
}

// Initialize when page loads
window.addEventListener('load', function() {
  setTimeout(checkAndShowBanner, 1000);
});
```

### 4.2 Hide Banner After Choice
```javascript
function hideBanner() {
  document.getElementById('cc-banner').style.display = 'none';
}

// Add to button click handlers
function acceptAll() {
  Truendo.acceptAllCookies();
  hideBanner();
}

function acceptNecessary() {
  Truendo.acceptNecessaryCookiesOnly();
  hideBanner();
}
```

---

## Step 5: Complete Implementation Example

### 5.1 Full HTML Implementation
```html
<!DOCTYPE html>
<html>
<head>
  <!-- Truendo Setup -->
  <script>
    window.TruSettings = {
      siteid: "YOUR_SITE_ID_HERE",
      custom_url: "true",
      custom_url_value: "truendo",
      tru_headless: "true",
    };
  </script>
  <script
    id="truendoAutoBlock"
    type="text/javascript"
    src="./truendo/pc/truendo_cmp.pid.js"
  ></script>
  
  <title>Custom Cookie Banner</title>
  <style>
    /* Banner Styles */
    #cc-banner {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: #ffffff;
      border-top: 2px solid #e0e0e0;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
      padding: 20px;
      z-index: 9999;
      font-family: Arial, sans-serif;
      display: none;
    }
    
    #cc-banner h3 {
      margin: 0 0 10px 0;
      font-size: 18px;
      color: #333;
    }
    
    #cc-banner p {
      margin: 0 0 15px 0;
      font-size: 14px;
      line-height: 1.5;
      color: #666;
    }
    
    #cc-banner button {
      margin-right: 10px;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
    }
    
    .btn-options {
      background: #f5f5f5;
      color: #333;
      border: 1px solid #ccc;
    }
    
    .btn-necessary {
      background: #666;
      color: white;
    }
    
    .btn-accept {
      background: #007bff;
      color: white;
    }
    
    #cc-banner button:hover {
      opacity: 0.9;
    }
  </style>
</head>
<body>
  <!-- Your page content -->
  <h1>Welcome to Our Website</h1>
  <p>This is your main content...</p>
  
  <!-- Custom Cookie Banner -->
  <div id="cc-banner">
    <h3>Your Privacy</h3>
    <p>
      We use cookies to improve your experience on our site and to show you
      personalized ads. Click [ACCEPT] to accept all cookies, [NECESSARY ONLY]
      to accept only the necessary cookies, or [MY OPTIONS] to find out more
      about the use of cookies and to change your cookie preferences.
    </p>
    
    <button type="button" class="btn-options" onclick="openCookieOptions()">
      My Options
    </button>
    <button type="button" class="btn-necessary" onclick="acceptNecessaryOnly()">
      Necessary Only
    </button>
    <button type="button" class="btn-accept" onclick="acceptAllCookies()">
      Accept
    </button>
  </div>

  <script>
    // Banner control functions
    function showBanner() {
      document.getElementById('cc-banner').style.display = 'block';
    }
    
    function hideBanner() {
      document.getElementById('cc-banner').style.display = 'none';
    }
    
    function openCookieOptions() {
      Truendo.openCookieSettings();
      hideBanner();
    }
    
    function acceptNecessaryOnly() {
      Truendo.acceptNecessaryCookiesOnly();
      hideBanner();
    }
    
    function acceptAllCookies() {
      Truendo.acceptAllCookies();
      hideBanner();
    }
    
    // Check if banner should be shown
    function checkBannerDisplay() {
      if (window.Truendo && typeof Truendo.hasUserMadeChoice === 'function') {
        if (!Truendo.hasUserMadeChoice()) {
          showBanner();
        }
      } else {
        // Fallback: show banner if Truendo not fully loaded
        showBanner();
      }
    }
    
    // Initialize when page loads
    window.addEventListener('load', function() {
      setTimeout(checkBannerDisplay, 1000);
    });
  </script>
</body>
</html>
```

---

## Step 6: Advanced Customization Options

### 6.1 Multi-Language Support
```javascript
const bannerText = {
  en: {
    title: "Your Privacy",
    description: "We use cookies to improve your experience...",
    options: "My Options",
    necessary: "Necessary Only",
    accept: "Accept"
  },
  es: {
    title: "Tu Privacidad",
    description: "Utilizamos cookies para mejorar tu experiencia...",
    options: "Mis Opciones",
    necessary: "Solo Necesarias",
    accept: "Aceptar"
  }
};

function updateBannerLanguage(lang) {
  const text = bannerText[lang] || bannerText.en;
  document.querySelector('#cc-banner h3').textContent = text.title;
  document.querySelector('#cc-banner p').textContent = text.description;
  // Update button text...
}
```

### 6.2 Animation Effects
```css
#cc-banner {
  transform: translateY(100%);
  transition: transform 0.3s ease-in-out;
}

#cc-banner.show {
  transform: translateY(0);
}
```

```javascript
function showBanner() {
  const banner = document.getElementById('cc-banner');
  banner.style.display = 'block';
  setTimeout(() => banner.classList.add('show'), 10);
}

function hideBanner() {
  const banner = document.getElementById('cc-banner');
  banner.classList.remove('show');
  setTimeout(() => banner.style.display = 'none', 300);
}
```

### 6.3 Mobile Responsive Design
```css
@media (max-width: 768px) {
  #cc-banner {
    padding: 15px;
  }
  
  #cc-banner button {
    display: block;
    width: 100%;
    margin: 5px 0;
  }
  
  #cc-banner p {
    font-size: 13px;
  }
}
```

---

## Step 7: Testing and Validation

### 7.1 Testing Checklist
- [ ] Banner appears on first visit
- [ ] Banner doesn't show after user makes choice
- [ ] "My Options" button opens detailed settings
- [ ] "Necessary Only" button sets correct preferences
- [ ] "Accept" button enables all cookies
- [ ] Banner hides after any button click
- [ ] User preferences persist across page loads
- [ ] Banner works on mobile devices

### 7.2 Clear Cookies for Testing
```javascript
// Clear Truendo consent for testing
function clearConsent() {
  localStorage.removeItem('truendo-consent');
  sessionStorage.removeItem('truendo-consent');
  location.reload();
}
```

### 7.3 Debug Console Commands
```javascript
// Check if user has made choice
console.log("User made choice:", Truendo.hasUserMadeChoice());

// Check current consent status
console.log("Current consent:", Truendo.getConsentData());

// Force show banner for testing
document.getElementById('cc-banner').style.display = 'block';
```

---

## Step 8: Best Practices

### 8.1 Accessibility
```html
<!-- Add ARIA attributes -->
<div id="cc-banner" role="dialog" aria-labelledby="banner-title" aria-describedby="banner-description">
  <h3 id="banner-title">Your Privacy</h3>
  <p id="banner-description">We use cookies to improve your experience...</p>
  
  <!-- Add keyboard navigation -->
  <button type="button" tabindex="0" onclick="openCookieOptions()">
    My Options
  </button>
</div>
```

### 8.2 Performance
- Load banner content dynamically to reduce initial page load
- Use CSS transforms for animations instead of changing layout properties
- Minimize banner JavaScript to essential functions only

### 8.3 Legal Compliance
- Ensure banner text meets GDPR requirements
- Provide clear descriptions of cookie usage
- Make "reject" option as prominent as "accept"
- Link to detailed privacy policy

---

## Troubleshooting

### Common Issues:
1. **Banner not showing**: Check if `tru_headless: "true"` is set and user hasn't already made choice
2. **Buttons not working**: Verify Truendo script loaded and functions are available
3. **Banner showing after choice**: Check `hasUserMadeChoice()` function
4. **Styling issues**: Ensure CSS z-index is high enough and position is fixed

### Reset User Choice for Testing:
```javascript
// Clear all Truendo data
localStorage.clear();
sessionStorage.clear();
location.reload();
```